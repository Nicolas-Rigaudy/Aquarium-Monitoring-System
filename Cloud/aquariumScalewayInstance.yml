- hosts: web

tasks:
    - name: Installing dependencies
    apt: name={{ item }} update_cache=yes state=latest
    with_items:
        - apache2
        - mariadb-server
        - php7.3
        - php7.3-mysql
        - php-mbstring
        - php-zip
        - unzip
        - pwgen
        - php-json
        - memcached
        - software-properties-common
        - python-mysqldb
        - mariadb-client
        - mariadb-common
        - mariadb-server

    - name: Download zip files
    get_url: url={{item}} dest=/ mode='0440'
    with_items:
        - https://files.phpmyadmin.net/phpMyAdmin/5.0.2/phpMyAdmin-5.0.2-all-languages.zip
        - https://releases.hashicorp.com/packer/1.6.4/packer_1.6.4_linux_amd64.zip

    - name: Unzip phpMyAdmin to /usr/share/phpmyadmin
    unarchive:
        src: phpMyAdmin-5.0.2-all-languages.zip
        dest: /usr/share/phpmyadmin

    - name: Unzip packer to /usr/local/bin/packer
    unarchive:
        src: packer_1.6.4_linux_amd64.zip
        dest: /usr/local/bin/packer

    - name: Create a temp directory for phpmyadmin and set www-data as owner
    file:
        path: /var/lib/phpmyadmin/tmp
        state: directory
        mode: '0755'
        recurse: yes
        owner: www-data:www-data

    - name: Copying file with owner and permission
    copy:
        src: /usr/share/phpmyadmin/config.sample.inc.php
        dest: /usr/share/phpmyadmin/config.inc.php
        owner:
        group:
        mode: '0644'

    - name: Create a mysql user with an 32 character random password
    mysql_user:
        name: "{{ client }}"
        password: "{{ lookup('password', 'credentials/' + client + '/'
        + tier + '/' + role + '/mysqlpassword length=32') }}"
        priv: "{{ client }}_{{ tier }}_{{ role }}.*:ALL"

    - name: Create MariaDB Directories
    file: path=/data/{{item}} state=directory owner=mysql group=mysql recurse=yes
    with_items:
        - db
        - log

    - name: Write new configuration file
    template:
        src: /home/vagrant/ansible/templates/mysql/my.cnf
        dest: /etc/mysql/my.cnf
        owner: mysql
        group: mysql
        mode: '0600'
        backup: yes

    - name: Count files in /data/db
    find: path=/data/db patterns='*'
    register: db_files

    - name: Run mysql_install_db only if /data/db is empty
    command: mysql_install_db --datadir=/data/db
    when: db_files.matched|int == 0

    - name: Start MariaDB
    service: name=mysql state=started

    - name: Is root password set?
    command: mysql -u root --execute "SELECT NOW()"
    register: is_root_password_set
    ignore_errors: yes

    - name: Delete anonymous users
    mysql_user: user="" state="absent"
    when: is_root_password_set.rc == 0

    - name: Generate mysql root password
    shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 10
    register: mysql_root_password
    when: is_root_password_set.rc == 0

    - name: Set root password
    mysql_user: user=root password="{{mysql_root_password.stdout}}"
    host=localhost
    when: is_root_password_set.rc == 0

    - name: Set root password for other hosts
    mysql_user: user=root password="{{mysql_root_password.stdout}}"
    host="{{item}}" login_user="root" login_host="localhost"
    login_password="{{mysql_root_password.stdout}}"
    when: is_root_password_set.rc == 0
    with_items:
        - "127.0.0.1"
        - "::1"

    - name: Inform user of mysql root password
    debug:
        msg: "MariaDB root password was set to
        {{mysql_root_password.stdout}}"
    when: is_root_password_set.rc == 0

    - name: Create temperature database
    mysql_db:
        name: temperature
        login_user: root
        login_password: "{{mysql_root_password.stdout}}"
        login_host: localhost
        state: present
    when: is_root_password_set.rc == 0

    - name: Create brightness database
    mysql_db:
        name: brightness
        login_user: root
        login_password: "{{mysql_root_password.stdout}}"
        login_host: localhost
        state: present
    when: is_root_password_set.rc == 0

    - name: Generate aquarium_monitor password
    shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 10
    register: mysql_aquarium_monitor_password
    when: is_root_password_set.rc == 0

    - name: Create user for sensor databases
    mysql_user:
        name: aquarium_monitor
        password: "{{mysql_aquarium_monitor_password}}"
        priv: temperature.*:SELECT,INSERT,UPDATE,DELETE
		priv: brightness.*:SELECT,INSERT,UPDATE,DELETE
        login_user: root
        login_password: "{{mysql_root_password.stdout}}"
        state: present
    when: is_root_password_set.rc == 0